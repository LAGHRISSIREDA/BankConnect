package com.codesigne.security;


import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.codesigne.services.impl.UserServiceImpl;

import lombok.RequiredArgsConstructor;








@Configuration
@EnableWebSecurity
public class WebSecurityConfig {
   private final BCryptPasswordEncoder bCryptPasswordEncoder;
   private final UserServiceImpl userServiceImpl;
   private final AuthorizationFilter authorizationFilter;
   
   public WebSecurityConfig(UserServiceImpl userServiceImpl,BCryptPasswordEncoder bCryptPasswordEncoder,AuthorizationFilter authorizationFilter) {
	   this.bCryptPasswordEncoder = bCryptPasswordEncoder;
	   this.userServiceImpl = userServiceImpl;
	   this.authorizationFilter = authorizationFilter;
   }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                .cors().and()
                .csrf().disable()
                .authorizeHttpRequests()
                .requestMatchers(HttpMethod.POST,SecurityConstants.SIGN_UP_URL)
                .permitAll()
                .anyRequest().authenticated()
                .and()
                .authenticationProvider(daoAuthenticationProvider())
                .addFilterBefore(authorizationFilter, UsernamePasswordAuthenticationFilter.class);
        return http.build();
    }
    
    
    protected AuthenticationFilter getAuthenticationFilter()throws Exception{
    	final AuthenticationFilter filter =new  AuthenticationFilter(authenticationManager(null));
    	filter.setFilterProcessesUrl("/users/login");
    	return filter;
    }
    
    
    public void configure(AuthenticationManagerBuilder auth) {
    	auth.authenticationProvider(daoAuthenticationProvider());
    }
    
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration config) throws Exception {
        return config.getAuthenticationManager();
    }
    
    @Bean
    public DaoAuthenticationProvider daoAuthenticationProvider() {
    	DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
    	provider.setPasswordEncoder(bCryptPasswordEncoder);
    	provider.setUserDetailsService(userServiceImpl);
    	return provider;
    }	


}